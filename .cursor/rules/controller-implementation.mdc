---
description: 
globs: 
alwaysApply: true
---
# Controller Implementation Guidelines

## Schema Definition and Validation

When implementing controllers, define validation schemas directly in the controller file using Zod:

```typescript
import { z } from 'zod';
import { ZodValidationPipe } from '@/infra/http/pipes/zod-validation-pipe';
import { createZodDto } from 'nestjs-zod';

// Define schema with validations
const loginUserBodySchema = z.object({
  email: z.string().trim().min(3).max(255).email(),
  password: z.string().trim().min(6).max(45),
});

// Create a validation pipe instance
const bodyValidationPipe = new ZodValidationPipe(loginUserBodySchema);

// Create a class for type safety
class LoginUserBodySchema extends createZodDto(loginUserBodySchema) {}

@Controller()
@ApiTags(ROUTES.AUTH.LOGIN.TAGS)
export class LoginController {
  @Post(ROUTES.AUTH.LOGIN.URL)
  @HttpCode(200)
  async login(
    @Body(bodyValidationPipe) body: LoginUserBodySchema,
    // ...other parameters
  ) {
    // Implementation
  }
}
```

## Response Formatting with Presenters

Always use presenters to format controller responses for consistency:

```typescript
@Post(ROUTES.AUTH.LOGIN.URL)
async login(@Body(bodyValidationPipe) body: LoginUserBodySchema) {
  const result = await this.authenticateUser.execute({
    email: body.email,
    password: body.password,
  });

  if (result.isLeft()) {
    throw new UnauthorizedException('Invalid credentials');
  }

  // Use presenter to format the response
  return LoginPresenter.toHttp(result.value);
}
```

## Route Constants Usage

Use the centralized route constants for all routes:

```typescript
import { ROUTES } from '@/core/constants/routes';

@Controller()
@ApiTags(ROUTES.AUTH.LOGIN.TAGS)
export class LoginController {
  @Post(ROUTES.AUTH.LOGIN.URL)
  @HttpCode(200)
  @ApiOperation({
    summary: ROUTES.AUTH.LOGIN.SUMMARY,
    description: ROUTES.AUTH.LOGIN.DESCRIPTION,
  })
  // Method implementation...
}
```

## API Documentation

Include proper Swagger/OpenAPI documentation for all endpoints:

```typescript
@ApiResponse({
  status: 200,
  description: 'The authentication was successful and returned tokens',
  schema: {
    properties: {
      accessToken: { type: 'string' },
      refreshToken: { type: 'string' },
      user: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          email: { type: 'string' },
        },
      },
    },
  },
})
@ApiResponse({
  status: 401,
  description: 'Invalid credentials',
})
```

## HTTP Status Codes

Set appropriate HTTP status codes for all responses:

```typescript
@Post(ROUTES.AUTH.LOGIN.URL)
@HttpCode(200) // Explicitly set HTTP status for successful response
async login() {
  // Implementation
}
```

## Complete Controller Example

Here's a complete example following all guidelines:

```typescript
import {
  Body,
  Controller,
  HttpCode,
  Post,
  UnauthorizedException,
  Ip,
  Headers,
} from '@nestjs/common';
import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { ROUTES } from '@/core/constants/routes';
import { z } from 'zod';
import { ZodValidationPipe } from '@/infra/http/pipes/zod-validation-pipe';
import { createZodDto } from 'nestjs-zod';
import { LoginPresenter } from '@/infra/presenters/auth/login.presenter';
import { NestAuthenticateUserUseCase } from '@/infra/injectable-use-cases/auth/nest-authenticate-user-use-case';

const loginUserBodySchema = z.object({
  email: z.string().trim().min(3).max(255).email(),
  password: z.string().trim().min(6).max(45),
});

const bodyValidationPipe = new ZodValidationPipe(loginUserBodySchema);
class LoginUserBodySchema extends createZodDto(loginUserBodySchema) {}

@Controller()
@ApiTags(ROUTES.AUTH.LOGIN.TAGS)
export class LoginController {
  constructor(private authenticateUser: NestAuthenticateUserUseCase) {}

  @Post(ROUTES.AUTH.LOGIN.URL)
  @HttpCode(200)
  @ApiOperation({
    summary: ROUTES.AUTH.LOGIN.SUMMARY,
    description: ROUTES.AUTH.LOGIN.DESCRIPTION,
  })
  @ApiResponse({
    status: 200,
    description: 'The authentication was successful and returned tokens',
    schema: {
      properties: {
        accessToken: { type: 'string' },
        refreshToken: { type: 'string' },
        user: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            email: { type: 'string' },
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Invalid credentials',
  })
  async login(
    @Body(bodyValidationPipe) body: LoginUserBodySchema,
    @Ip() ip: string,
    @Headers('user-agent') userAgent: string,
  ) {
    const result = await this.authenticateUser.execute({
      email: body.email,
      password: body.password,
      ipAddress: ip,
      deviceInfo: userAgent,
    });

    if (result.isLeft()) {
      throw new UnauthorizedException('Invalid credentials');
    }

    return LoginPresenter.toHttp(result.value);
  }
}
```
