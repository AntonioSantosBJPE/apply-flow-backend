---
description: 
globs: 
alwaysApply: true
---
# Sistema de Autorização

O projeto implementa um sistema avançado de autorização que combina RBAC (Role-Based Access Control) e ABAC (Attribute-Based Access Control) com hierarquia de permissões.

## Princípios de Autorização

- As permissões são avaliadas em uma hierarquia específica
- Permissões explícitas têm precedência sobre permissões herdadas
- Negações explícitas têm precedência sobre permissões positivas

## Hierarquia de Permissões

A avaliação de permissões segue esta ordem hierárquica:
1. **Permissões de Usuário** - Mais alta precedência
2. **Permissões de Cargo** - Segunda mais alta precedência
3. **Permissões de Departamento** - Terceira mais alta precedência
4. **Permissões de Papel (Role)** - Mais baixa precedência

## Tipos de Permissões

- **Permissões de Rota**: Controlam acesso a endpoints HTTP específicos
- **Permissões de Funcionalidade**: Controlam acesso a funcionalidades específicas do sistema
- **Grupos de Permissões**: Agrupam permissões relacionadas para facilitar o gerenciamento

## Implementação

### Verificação de Permissões

O sistema de verificação de permissões deve:
- Verificar permissões explícitas do usuário primeiro
- Verificar permissões do cargo do usuário
- Verificar permissões do departamento do usuário
- Verificar permissões das roles do usuário
- Aplicar regras de negação explícita (UserPermission.is_allowed = false)

### Decorators e Guards

Para implementar a verificação de permissões:
- Usar guards do NestJS para proteção de rotas
- Implementar decorators para verificação de permissões
- Armazenar permissões em cache para otimização

### Exemplo de Uso de Decorators

```typescript
@Controller('resources')
export class ResourceController {
  @Get()
  @RequirePermission('resources:list')
  async listResources() {
    // Implementation
  }

  @Post()
  @RequirePermission('resources:create')
  async createResource() {
    // Implementation
  }
}
```

### Middleware de Autorização

O middleware de autorização deve:
- Verificar token JWT para identidade do usuário
- Carregar informações de departamento, cargo e roles do usuário
- Verificar permissões baseadas na rota/ação solicitada
- Rejeitar requisições não autorizadas com código 403

## Armazenamento em Cache

Para otimização de desempenho:
- Permissões do usuário devem ser cacheadas
- Cache deve ser invalidado quando permissões são modificadas
- Usar Redis para caching distribuído
