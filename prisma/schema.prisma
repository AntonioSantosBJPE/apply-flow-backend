// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// CORE AUTHENTICATION TABLES
// =====================================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  password_hash     String    @db.VarChar(255)
  first_name        String    @db.VarChar(255)
  last_name         String    @db.VarChar(255)
  is_active         Boolean   @default(true)
  is_email_verified Boolean   @default(false)
  last_login        DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  refresh_tokens RefreshToken[]
  audit_logs     AuditLog[]

  @@map("users")
}

model RefreshToken {
  id          String    @id @default(uuid()) @db.Uuid
  user_id     String    @db.Uuid
  token       String    @unique
  device_info String?
  ip_address  String?
  expires_at  DateTime
  created_at  DateTime  @default(now())
  deleted_at  DateTime?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AuditLog {
  id          String    @id @default(uuid()) @db.Uuid
  user_id     String    @db.Uuid
  action      String
  resource    String
  resource_id String?
  details     Json?     @db.Json
  ip_address  String?
  created_at  DateTime  @default(now())
  deleted_at  DateTime?

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("audit_logs")
}
